================================
Declarations of variables
================================

a = 3

---

(source_file
  (expression (identifier) (factor (number)))
)

========================================
Declarations of variables with semicolon
========================================

a = 3;

---

(source_file
  (expression (identifier) (factor (number)))
)

========================================
Declarations of variables with operation
========================================

a = 3 == a;

---

(source_file
  (expression (identifier) (operation (factor (number)) (factor (identifier))))
)

========================================
Declarations of variables as computation
========================================

a = 3 * f;

---

(source_file
  (expression (identifier) (operation (factor (number)) (factor (identifier))))
)

===================
Vector declarations
===================

a = [1 2 3;1, 2, 3];

---

(source_file
  (expression (identifier) (vector_definition (factor (number)) (factor (number)) (factor (number)) (factor (number)) (factor (number)) (factor (number))))
)

===================
Rotated vector declarations
===================

a = [1 2 3;1, 2, 3]';

---

(source_file
  (expression (identifier) (vector_definition (factor (number)) (factor (number)) (factor (number)) (factor (number)) (factor (number)) (factor (number))))
)

==================
Vector as variable
==================

[t, k] = func();

---

(source_file
  (expression (vector_definition (factor (identifier)) (factor (identifier))) (factor (function_call (identifier) (argument_list))))
)

==============
Declare string
==============

a = '';
a = 'c';
b = 'a ''b'' c' 

---
(source_file
  (expression (identifier) (factor (string)))
  (expression (identifier) (factor (string)))
  (expression (identifier) (factor (string))))

==============
Declare char vector
==============

a = ['b', 'c'];

---
(source_file
  (expression (identifier) (vector_definition (factor (string)) (factor (string)))))

==============
Declare string cell array
==============

a = {'b', 'c'};

---
(source_file
  (expression (identifier) (cell_definition (factor (string)) (factor (string)))))

==============
Declare struct field
==============

a.b = 'c';

---
(source_file
  (expression (struct (identifier) (identifier)) (factor (string))))

==============
Access struct field
==============

a = b.c;

---
(source_file
  (expression (identifier) (factor (struct (identifier) (identifier)))))

==============
Declare range
==============

a = 1:10;

---
(source_file
  (expression (identifier) (factor (range (number) (number)))))

======================
Declare interval range
======================

a = 1:2:10;

---
(source_file
  (expression (identifier) (factor (range (number) (number) (number)))))

======================
Declare with cell access
======================

a = varargin{1}

---
(source_file
  (expression (identifier) (factor (cell_access (identifier) (factor (number))))))


